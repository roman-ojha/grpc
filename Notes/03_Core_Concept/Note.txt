*) Overview:
    -> https://grpc.io/docs/what-is-grpc/core-concepts/#overview
    *) Service definition:
        
        
            service HelloService {
                rpc SayHello (HelloRequest) returns (HelloResponse);
            }

            message HelloRequest {
                string greeting = 1;
            }

            message HelloResponse {
                string reply = 1;
            }
        
        -> gRPC lets you define four kinds of service method:

            1) Unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
                -> rpc SayHello(HelloRequest) returns (HelloResponse);
            2) Server streaming RPCs where the c-> Like many RPC systems, gRPC is based around the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types. By default, gRPC uses protocol buffers as the Interface Definition Language (IDL) for describing both the service interface and the structure of the payload messages. It is possible to use other alternatives if desired.lient sends a request to the server and gets a stream to read a sequence of messages back. The client reads from the returned stream until there are no more messages. gRPC guarantees message ordering within an individual RPC call.
                -> rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);
            3) Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream. Once the client has finished writing the messages, it waits for the server to read them and return its response. Again gRPC guarantees message ordering within an individual RPC call.
                -> rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);
            4) Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream. The two streams operate independently, so clients and servers can read and write in whatever order they like: for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message, or some other combination of reads and writes. The order of messages in each stream is preserved.
                -> rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
                
    *) Using the API:
        -> https://grpc.io/docs/what-is-grpc/core-concepts/#using-the-api

    *) Synchronous vs. asynchronous:
        -> https://grpc.io/docs/what-is-grpc/core-concepts/#synchronous-vs-asynchronous
        -> gRPC supports both synchronous and asynchronous styles of API, and also supports different message passing patterns like simple requests, responses, and bi-directional streaming. This flexibility allows gRPC to be used in a variety of distributed systems, where services can have different communication patterns and requirements.

    *) RPC life cycle:
        -> https://grpc.io/docs/what-is-grpc/core-concepts/#rpc-life-cycle

    *) Metadata:
        -> https://grpc.io/docs/what-is-grpc/core-concepts/#metadata

    *) Channels:
        -> https://grpc.io/docs/what-is-grpc/core-concepts/#channels